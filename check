http or https
type of AUTH : DB, OTP, SSO, API
credentials in GET method
sqli
xxs
directory listing 
hidden parameter 
captcha implementatoin
client side validation bypass
server banner disclosure
testing http methods
google dorking
clickjacking
password auto complete off
host header injection - changing url in request
robots.txt    https://www.searchenginewatch.com/2019/03/21/robotstxt-best-practice-guide/
web page comments //comments in source code
ssl test - testss.sh
account lockout policy
password policy
default cred
email disclosure
reset password functionality - if user mail is not validated - getting password in plain text
remember password functionality
create account functionality - new user registration

lockout policy after 5 failed login
check for backups in .zip file
host header : change paste other url in host field (host header misconfiguration)

*unhide hidden form fields

Test Scenarios for Security Testing:

Verify the web page which contains important data like password, credit card numbers, secret answers for security question etc should be submitted via HTTPS (SSL).
Verify the important information like password, credit card numbers etc should display in encrypted format.
Verify password rules are implemented on all authentication pages like Registration, forgot password, change password.
Verify if the password is changed the user should not be able to login with the old password.
Verify the error messages should not display any important information.
Verify if the user is logged out from the system or user session was expired, the user should not be able to navigate the site.
Verify to access the secured and non secured web pages directly without login.
Verify the “View Source code” option is disabled and should not be visible to the user.
Verify the user account gets locked out if the user is entering the wrong password several times.
Verify the cookies should not store passwords.
Verify if, any functionality is not working, the system should not display any application, server, or database information. Instead, it should display the custom error page.
Verify the SQL injection attacks.
Verify the user roles and their rights. For Example The requestor should not be able to access the admin page.
Verify the important operations are written in log files, and that information should be traceable.
Verify the session values are in an encrypted format in the address bar.
Verify the cookie information is stored in encrypted format.
Verify the application for Brute Force Attacks
